{
  "name": "Togglz Spring MVC Integration (under construction)",
  "tagline": "Spring MVC Togglz Installation Guide",
  "body": "#Togglz with Spring MVC\r\nA more in depth tutorial for how to integrate Togglz into simple Spring MVC web projects. This tutorial will more specifically be using the Spring Tools Suite (STS) IDE, however these instructions should be applicable to any Spring MVC project. In this tutorial we will create a simple HelloWorld Spring MVC project, and implement simple feature switches using [Togglz](https://togglz.org/) in Java.\r\n\r\n### Creating Hello World Project\r\n* Open Spring Tools Suite\r\n* File -> New -> Spring Legacy Project -> Spring MVC Project\r\n* Name project accordingly\r\n* Run project on server, localhost:8080/myapp should display Hello World by default\r\n\r\n## Adding Togglz to your Spring MVC Project\r\n\r\n### Togglz Dependencies\r\nIn the project explorer, find the pom.xml file that should be under your project folder. Add the following dependencies to your pom.xml file. These are Maven dependencies that will be added to your project. The libraries related to your dependencies will be added to your project after they are built. In our Spring MVC, the togglz core, servlet, spring-web, and admin console dependencies are required. Please refer to [Togglz](https://togglz.org/) for additional information. \r\n\r\n\r\n\r\n                <!-- Togglz core module (mandatory) -->\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.togglz</groupId>\r\n\t\t\t<artifactId>togglz-core</artifactId>\r\n\t\t\t<version>2.3.0.RC1</version>\r\n\t\t</dependency>\r\n\r\n\t\t<!-- Togglz for Servlet environments (mandatory for webapps) -->\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.togglz</groupId>\r\n\t\t\t<artifactId>togglz-servlet</artifactId>\r\n\t\t\t<version>2.3.0.RC1</version>\r\n\t\t</dependency>\r\n\r\n\t\t<!-- Spring integration (optional) -->\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.togglz</groupId>\r\n\t\t\t<artifactId>togglz-spring-web</artifactId>\r\n\t\t\t<version>2.3.0.RC1</version>\r\n\t\t</dependency>\r\n\t\t<!-- Togglz Admin Console -->\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.togglz</groupId>\r\n\t\t\t<artifactId>togglz-console</artifactId>\r\n\t\t\t<version>2.3.0.RC1</version>\r\n\t\t</dependency>\r\n\r\n\r\n##Togglz Configuration\r\nAfter adding the dependencies to your project, you will have to add two additional files, MyFeatures.java and MyTogglzConfiguration.java. \r\n\r\n### MyFeatures Enum\r\n\r\nTogglz are implemented as enums in Java. You will need to declare a MyFeatures enum and add this file to your project and format it accordingly.\r\n\r\n    import org.togglz.core.Feature;\r\n    import org.togglz.core.annotation.EnabledByDefault;\r\n    import org.togglz.core.annotation.Label;\r\n    import org.togglz.core.context.FeatureContext;\r\n    \r\n    public enum MyFeatures implements Feature {\r\n\r\n\t @EnabledByDefault\r\n\t    @Label(\"First Feature\")\r\n\t    FEATURE_ONE,\r\n\r\n\t    @Label(\"Second Feature\")\r\n\t    FEATURE_TWO;\r\n\r\n\t    public boolean isActive() {\r\n\t        return FeatureContext.getFeatureManager().isActive(this);\r\n\t    }\r\n\t\r\n    }\r\n\r\n@EnabledByDefault - these togglz will be enabled when the application runs\r\n@Label - the name of the feature\r\n\r\n\r\n### Togglz Configuration Class\r\nYou will also need to create a Togglz configuration class. \r\n\r\n    import java.io.File;\r\n\r\n    import org.springframework.stereotype.Component;\r\n    import org.togglz.core.Feature;\r\n    import org.togglz.core.manager.TogglzConfig;\r\n    import org.togglz.core.repository.StateRepository;\r\n    import org.togglz.core.repository.file.FileBasedStateRepository;\r\n    import org.togglz.core.user.FeatureUser;\r\n    import org.togglz.core.user.SimpleFeatureUser;\r\n    import org.togglz.core.user.UserProvider;\r\n\r\n    @Component\r\n    public class MyTogglzConfiguration implements TogglzConfig {\r\n\t    public Class<? extends Feature> getFeatureClass() {\r\n        return MyFeatures.class;\r\n    }\r\n\r\n    public StateRepository getStateRepository() {\r\n        return new FileBasedStateRepository(new File(\"/tmp/features.properties\"));\r\n    }\r\n\r\n    public UserProvider getUserProvider() {\r\n    \t return new UserProvider() {\r\n             @Override\r\n             public FeatureUser getCurrentUser() {\r\n                 return new SimpleFeatureUser(\"admin\", true);\r\n             }\r\n         };\r\n    }\r\n    }\r\n\r\ngetFeatureClass() - retrieve the Features from your Features enum\r\ngetStateRepository() - return the specified storage, in this case \r\ngetUserProvider() - return the user at this instance of the application, in this case to make things simpler all instances will return that the user is an admin, this should not be used in production applications!!!\r\n\r\n### Adjust web.xml\r\nLastly, in order for your application to run togglz correctly, there are a few things you need to add to the web.xml file in your project. \r\n\r\nIn order for Togglz to recognize your configuration class you need to add this context param, be especially careful of the param-value, and make sure it maps to your specified package and class name: com.my.app.MyTogglzConfiguration\r\n\r\n       <context-param>\r\n\t\t<param-name>org.togglz.core.manager.TogglzConfig</param-name>\r\n\t\t<param-value>com.my.app.MyTogglzConfiguration</param-value>\r\n\t</context-param>\r\n\r\nTogglz will have to be specified whether or not the Feature Manager is provided, since we are working with a Spring MVC application, we need to specify that this is false\r\n\r\n\t<context-param>\r\n\t\t<param-name>org.togglz.FEATURE_MANAGER_PROVIDED</param-name>\r\n\t\t<param-value>false</param-value>\r\n\t</context-param>\r\n\r\nIf you are working in a Servlet environment 2.5 or earlier you will have to add this to your web.xml\r\n\r\n        <!-- Togglz configuration for Servlet 2.5 and earlier -->\r\n\t<filter>\r\n\t\t<filter-name>TogglzFilter</filter-name>\r\n\t\t<filter-class>org.togglz.servlet.TogglzFilter</filter-class>\r\n\t</filter>\r\n\t<filter-mapping>\r\n\t\t<filter-name>TogglzFilter</filter-name>\r\n\t\t<url-pattern>/*</url-pattern>\r\n\t</filter-mapping>\r\n\r\nLastly, the console servlet is added in order to properly configure the admin console.\r\n\r\n        <servlet>\r\n\t\t<servlet-name>TogglzConsoleServlet</servlet-name>\r\n\t\t<servlet-class>org.togglz.console.TogglzConsoleServlet</servlet-class>\r\n\t</servlet>\r\n\t<servlet-mapping>\r\n\t\t<servlet-name>TogglzConsoleServlet</servlet-name>\r\n\t\t<url-pattern>/togglz/*</url-pattern>\r\n\t</servlet-mapping>\r\n\r\n\r\n### Test the Togglz Admin Console\r\nBuild and run your project, and go to localhost:8080/myapp/togglz, and the admin console should appear if you have integrated togglz into your application correctly. \r\n\r\n### Support or Contact\r\nTBD\r\n\r\n### TO DO:\r\n-added togglz jdbc capability\r\n- added caching state repository ability\r\n- set up google cloud platform to host mysql server\r\n- access mysql server from jdbc driver in application\r\n- multiple machines can access the togglz database from the hello world application \r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}